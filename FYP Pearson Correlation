import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr, ttest_ind

# Data
height = np.array([169, 164, 172, 145, 170, 153, 147, 149, 173, 153, 152, 150.5, 149, 158, 159, 167, 154, 176, 149, 151, 148, 160, 153, 166, 157, 155, 153, 125, 149, 162, 170.18, 165, 161.2, 155, 154, 168, 153, 183, 173, 176, 175, 169, 168, 155, 156, 155, 151, 165, 156, 156, 142])
foot_length = np.array([28, 20.5, 24, 22.5, 22.5, 24, 21.5, 22.9, 27.5, 23.5, 22.6, 23.3, 22, 24, 24.5, 26, 23.5, 24, 21.5, 23, 21.5, 24.7, 23.6, 24.5, 22.5, 22, 23.7, 18, 23.5, 23, 28.5, 25, 25.5, 22.8, 23, 25.8, 38, 27.8, 25, 26, 24.5, 25.5, 23.5, 23.5, 25.5, 36, 23.9, 25, 23.5, 24.6, 22])

# Calculate correlation coefficient and p-value
r, p_value = pearsonr(foot_length, height)

# Calculate slope and intercept of the linear regression line
slope, intercept = np.polyfit(foot_length, height, 1)

# Calculate standard error
std_err = np.std(height - slope * foot_length)

# Calculate the t-test
group1 = height[foot_length < np.mean(foot_length)]
group2 = height[foot_length >= np.mean(foot_length)]
t_stat, p_value_ttest = ttest_ind(group1, group2)

# Plot the data with linear regression line
fig, ax = plt.subplots()
ax.scatter(foot_length, height)
ax.plot(foot_length, slope * foot_length + intercept, color='red')

# Format the text box
textstr = '\n'.join((
    r'slope: {:.4f}',
    r'intercept: {:.4f}',
    r'correlation coefficient: {:.4f}',
    r'p-value (correlation): {:.4f}',
    r'standard error: {:.4f}',
    r't-statistic: {:.4f}',
    r'p-value (t-test): {:.4f}')).format(slope, intercept, r, p_value, std_err, t_stat, p_value_ttest)
props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
ax.text(0.75, 0.95, textstr, transform=ax.transAxes, fontsize=14,
        verticalalignment='top', bbox=props)

# Set the axis labels
plt.xlabel('Foot Length')
plt.ylabel('Height')

# Show the plot
plt.show()
